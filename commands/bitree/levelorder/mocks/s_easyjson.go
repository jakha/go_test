// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package mocks

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson8e36b5f5DecodeGithubComJakhaLcCommandsBitreeLevelorderSoso(in *jlexer.Lexer, out *Objs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "list":
			if in.IsNull() {
				in.Skip()
				out.List = nil
			} else {
				in.Delim('[')
				if out.List == nil {
					if !in.IsDelim(']') {
						out.List = make([]*Obj, 0, 8)
					} else {
						out.List = []*Obj{}
					}
				} else {
					out.List = (out.List)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Obj
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Obj)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.List = append(out.List, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e36b5f5EncodeGithubComJakhaLcCommandsBitreeLevelorderSoso(out *jwriter.Writer, in Objs) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"list\":"
		out.RawString(prefix[1:])
		if in.List == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.List {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Objs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e36b5f5EncodeGithubComJakhaLcCommandsBitreeLevelorderSoso(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Objs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e36b5f5EncodeGithubComJakhaLcCommandsBitreeLevelorderSoso(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Objs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e36b5f5DecodeGithubComJakhaLcCommandsBitreeLevelorderSoso(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Objs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e36b5f5DecodeGithubComJakhaLcCommandsBitreeLevelorderSoso(l, v)
}
func easyjson8e36b5f5DecodeGithubComJakhaLcCommandsBitreeLevelorderSoso1(in *jlexer.Lexer, out *Obj) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_id":
			out.ID = string(in.String())
		case "index":
			out.Index = int64(in.Int64())
		case "guid":
			out.GUID = string(in.String())
		case "isActive":
			out.IsActive = bool(in.Bool())
		case "balance":
			out.Balance = string(in.String())
		case "picture":
			out.Picture = string(in.String())
		case "age":
			out.Age = int64(in.Int64())
		case "eyeColor":
			out.EyeColor = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "gender":
			out.Gender = string(in.String())
		case "company":
			out.Company = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "phone":
			out.Phone = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "about":
			out.About = string(in.String())
		case "registered":
			out.Registered = string(in.String())
		case "latitude":
			out.Latitude = float64(in.Float64())
		case "longitude":
			out.Longitude = float64(in.Float64())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Tags = append(out.Tags, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "friends":
			if in.IsNull() {
				in.Skip()
				out.Friends = nil
			} else {
				in.Delim('[')
				if out.Friends == nil {
					if !in.IsDelim(']') {
						out.Friends = make([]*Friend, 0, 8)
					} else {
						out.Friends = []*Friend{}
					}
				} else {
					out.Friends = (out.Friends)[:0]
				}
				for !in.IsDelim(']') {
					var v5 *Friend
					if in.IsNull() {
						in.Skip()
						v5 = nil
					} else {
						if v5 == nil {
							v5 = new(Friend)
						}
						(*v5).UnmarshalEasyJSON(in)
					}
					out.Friends = append(out.Friends, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "greeting":
			out.Greeting = string(in.String())
		case "favoriteFruit":
			out.FavoriteFruit = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e36b5f5EncodeGithubComJakhaLcCommandsBitreeLevelorderSoso1(out *jwriter.Writer, in Obj) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"index\":"
		out.RawString(prefix)
		out.Int64(int64(in.Index))
	}
	{
		const prefix string = ",\"guid\":"
		out.RawString(prefix)
		out.String(string(in.GUID))
	}
	{
		const prefix string = ",\"isActive\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsActive))
	}
	{
		const prefix string = ",\"balance\":"
		out.RawString(prefix)
		out.String(string(in.Balance))
	}
	{
		const prefix string = ",\"picture\":"
		out.RawString(prefix)
		out.String(string(in.Picture))
	}
	{
		const prefix string = ",\"age\":"
		out.RawString(prefix)
		out.Int64(int64(in.Age))
	}
	{
		const prefix string = ",\"eyeColor\":"
		out.RawString(prefix)
		out.String(string(in.EyeColor))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"gender\":"
		out.RawString(prefix)
		out.String(string(in.Gender))
	}
	{
		const prefix string = ",\"company\":"
		out.RawString(prefix)
		out.String(string(in.Company))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	{
		const prefix string = ",\"registered\":"
		out.RawString(prefix)
		out.String(string(in.Registered))
	}
	{
		const prefix string = ",\"latitude\":"
		out.RawString(prefix)
		out.Float64(float64(in.Latitude))
	}
	{
		const prefix string = ",\"longitude\":"
		out.RawString(prefix)
		out.Float64(float64(in.Longitude))
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Tags {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.String(string(v7))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"friends\":"
		out.RawString(prefix)
		if in.Friends == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Friends {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					(*v9).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"greeting\":"
		out.RawString(prefix)
		out.String(string(in.Greeting))
	}
	{
		const prefix string = ",\"favoriteFruit\":"
		out.RawString(prefix)
		out.String(string(in.FavoriteFruit))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Obj) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e36b5f5EncodeGithubComJakhaLcCommandsBitreeLevelorderSoso1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Obj) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e36b5f5EncodeGithubComJakhaLcCommandsBitreeLevelorderSoso1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Obj) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e36b5f5DecodeGithubComJakhaLcCommandsBitreeLevelorderSoso1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Obj) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e36b5f5DecodeGithubComJakhaLcCommandsBitreeLevelorderSoso1(l, v)
}
func easyjson8e36b5f5DecodeGithubComJakhaLcCommandsBitreeLevelorderSoso2(in *jlexer.Lexer, out *Friend) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8e36b5f5EncodeGithubComJakhaLcCommandsBitreeLevelorderSoso2(out *jwriter.Writer, in Friend) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Friend) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8e36b5f5EncodeGithubComJakhaLcCommandsBitreeLevelorderSoso2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Friend) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8e36b5f5EncodeGithubComJakhaLcCommandsBitreeLevelorderSoso2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Friend) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8e36b5f5DecodeGithubComJakhaLcCommandsBitreeLevelorderSoso2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Friend) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8e36b5f5DecodeGithubComJakhaLcCommandsBitreeLevelorderSoso2(l, v)
}
